{
  "name": "04-MQTT-xymd02Googlesheet_threshold_Log",
  "nodes": [
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "site",
              "value": "={{$env.SITE_NAME || 'Wather STA1'}}"
            },
            {
              "name": "baseTopic",
              "value": "={{$env.MQTT_BASE_TOPIC || 'Wather STA1'}}"
            }
          ]
        },
        "options": {}
      },
      "id": "b6365bed-4f5b-401a-9493-ca64cd817ce5",
      "name": "Set: Site Name",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        -768,
        -352
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bBdHKma7eqZtVHaBk31GKj4HvZ7zyv3nDPyuPWBDWQU",
          "mode": "list",
          "cachedResultName": "n8nxy-md02_logger",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bBdHKma7eqZtVHaBk31GKj4HvZ7zyv3nDPyuPWBDWQU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "xy-md02",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bBdHKma7eqZtVHaBk31GKj4HvZ7zyv3nDPyuPWBDWQU/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "baseTopic": "={{ $json.baseTopic }}",
            "value_source": "={{ $json.value_source }}",
            "status_detail": "={{ $json.status_detail }}",
            "isHigh": "={{ $json.isHigh }}",
            "mode": "={{ $json.mode }}",
            "threshold_temp": "={{ $json.threshold_temp }}",
            "hunit": "={{ $json.hunit }}",
            "hum": "={{ $json.hum }}",
            "tunit": "={{ $json.tunit }}",
            "temp": "={{ $json.temp }}",
            "site": "={{ $json.site }}",
            "ts": "={{ $json.ts }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "ts",
              "displayName": "ts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "site",
              "displayName": "site",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "temp",
              "displayName": "temp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tunit",
              "displayName": "tunit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hum",
              "displayName": "hum",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hunit",
              "displayName": "hunit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "threshold_temp",
              "displayName": "threshold_temp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mode",
              "displayName": "mode",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "isHigh",
              "displayName": "isHigh",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status_detail",
              "displayName": "status_detail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "baseTopic",
              "displayName": "baseTopic",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "value_source",
              "displayName": "value_source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        128,
        -352
      ],
      "id": "d845d8ec-e404-4bc1-bc01-75ca63f81442",
      "name": "Append row in sheet",
      "credentials": {
        "googleApi": {
          "id": "RUv1kTtSucsBEEbA",
          "name": "Google Service Account account#zero2hero#1"
        }
      }
    },
    {
      "parameters": {
        "topics": "xymd02",
        "options": {
          "jsonParseBody": true
        }
      },
      "type": "n8n-nodes-base.mqttTrigger",
      "typeVersion": 1,
      "position": [
        -992,
        -352
      ],
      "id": "51af9a7d-1b85-40f9-a55c-f5208b954e3b",
      "name": "MQTT Trigger",
      "credentials": {
        "mqtt": {
          "id": "yzb3rPCDhcnA9IgT",
          "name": "MQTT account#zero2hero#1"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e864e34c-5ba8-4a44-a86c-79e54b8b6dab",
              "leftValue": "={{$json.shouldLog}}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "996a4666-61e2-41c9-a8d2-5fe12a72e9db",
      "name": "shouldLog=true",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -96,
        -352
      ]
    },
    {
      "parameters": {
        "functionCode": "// Gate: 1m (high) / 60m (normal) — Generic (DHT or XY-MD02), no Telegram\n\n// ---- config (ENV + per-item overrides) ----\nconst HIGH_EVERY_MIN   = Number($env.HIGH_EVERY_MIN   ?? 1);\nconst NORMAL_EVERY_MIN = Number($env.NORMAL_EVERY_MIN ?? 60);\n\n// รับ item ปัจจุบัน\nconst item  = { ...$json };\nconst nowMs = Date.now();\n\n// site/baseTopic/sensor id (รองรับหลายแหล่งข้อมูล)\nconst siteName   = item.site || 'default';\nconst baseTopic  = item.baseTopic || item.topic || 'XYMD02'; // เดิม DHTsensor → ปรับเป็น XYMD02\nconst sensorId   = item.sensor_id ?? item.slave_id ?? item.device_id ?? null;\n\n// ให้คีย์มีเอกลักษณ์ขึ้น ถ้ามี sensor id\nconst sensorKey = sensorId ? `${siteName}::${baseTopic}::${sensorId}` : `${siteName}::${baseTopic}`;\n\n// ค่าช่วงเวลาตามลำดับความสำคัญ: item override > ENV > ดีฟอลต์\nconst highEveryMin   = Number.isFinite(Number(item.high_every_min))   ? Number(item.high_every_min)   : HIGH_EVERY_MIN;\nconst normalEveryMin = Number.isFinite(Number(item.normal_every_min)) ? Number(item.normal_every_min) : NORMAL_EVERY_MIN;\n\n// ---- global state ----\nconst g = getWorkflowStaticData('global');\ng._gate      = g._gate      || {};\ng._lastValid = g._lastValid || {};\n\ng._gate[sensorKey] = g._gate[sensorKey] || { lastMode: 'normal', lastHighAt: 0, lastNormalAt: 0, initDone: false };\ng._lastValid[sensorKey] = g._lastValid[sensorKey] || { temp: null, hum: null };\n\n// ---- helpers ----\nconst hasNum = v => {\n  const n = Number(v);\n  return Number.isFinite(n);\n};\nconst pick = (cur, last) => (hasNum(cur) ? Number(cur) : (hasNum(last) ? Number(last) : null));\n\n// ---- record last valid values ----\nif (hasNum(item.temp)) g._lastValid[sensorKey].temp = Number(item.temp);\nif (hasNum(item.hum))  g._lastValid[sensorKey].hum  = Number(item.hum);\n\n// ---- fallback to last valid if current missing ----\nitem.temp = pick(item.temp, g._lastValid[sensorKey].temp);\nitem.hum  = pick(item.hum,  g._lastValid[sensorKey].hum);\nitem.value_source = (hasNum($json.temp) || hasNum($json.hum)) ? 'current' : 'last';\n\n// ---- threshold & mode ----\nconst thresholdTemp = hasNum(item.threshold_temp)\n  ? Number(item.threshold_temp)\n  : (hasNum($env.TEMP_THRESHOLD) ? Number($env.TEMP_THRESHOLD) : 35);\n\nlet modeNow = (item.mode === 'high' || item.mode === 'normal') ? item.mode : 'normal';\nif (hasNum(item.temp)) modeNow = (Number(item.temp) > thresholdTemp) ? 'high' : 'normal';\n\nconst prevMode = g._gate[sensorKey].lastMode;\n\n// ---- decide logging frequency ----\nlet shouldLog     = false;\nlet status_detail = 'normal_periodic';\n\n// log แรกสุดของอุปกรณ์นี้ → ให้ยิงทันที 1 ครั้ง\nif (!g._gate[sensorKey].initDone) {\n  shouldLog = true;\n  status_detail = 'init';\n  if (modeNow === 'high') {\n    g._gate[sensorKey].lastHighAt = nowMs;\n  } else {\n    g._gate[sensorKey].lastNormalAt = nowMs;\n  }\n  g._gate[sensorKey].initDone = true;\n} else if (modeNow === 'high') {\n  const due = nowMs >= g._gate[sensorKey].lastHighAt + highEveryMin * 60 * 1000;\n  if (due) {\n    shouldLog = true;\n    g._gate[sensorKey].lastHighAt = nowMs;\n  }\n  status_detail = 'high';\n} else {\n  if (prevMode === 'high') {\n    // recovery: ออกจาก high → normal ให้บันทึกทันที 1 ครั้ง\n    shouldLog = true;\n    status_detail = 'recovery';\n    g._gate[sensorKey].lastNormalAt = nowMs;\n  } else {\n    const due = nowMs >= g._gate[sensorKey].lastNormalAt + normalEveryMin * 60 * 1000;\n    if (due) {\n      shouldLog = true;\n      g._gate[sensorKey].lastNormalAt = nowMs;\n    }\n    status_detail = 'normal_periodic';\n  }\n}\n\n// อัปเดตโหมดล่าสุด\ng._gate[sensorKey].lastMode = modeNow;\n\n// ---- enrich fields for downstream (ลงชีต/ต่อ flow) ----\nitem.mode             = modeNow;\nitem.threshold_temp   = thresholdTemp;\nitem.status_detail    = status_detail;\nitem.shouldLog        = !!shouldLog;\nitem.gate_key         = sensorKey;\nitem.high_every_min   = highEveryMin;\nitem.normal_every_min = normalEveryMin;\n\nreturn [item];"
      },
      "id": "5e898348-def4-4475-8199-1535b42b379a",
      "name": "Gate: 1m (high) / 60m (normal)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -320,
        -352
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse XY-MD02 (normalize) — Modbus XY-MD02\n// คอลัมน์: ts, site, temp, tunit, hum, hunit, threshold_temp, mode, isHigh, isLow, status_detail, baseTopic\n\nconst SITE          = $json.site ?? $json.site_name ?? $env.SITE_NAME ?? \"MSU_Lab\";\nconst BASE_TOPIC    = $json.baseTopic ?? $json.topic ?? $env.MQTT_BASE_TOPIC ?? \"XYMD02\";\nconst TEMP_SETPT    = Number($env.TEMP_THRESHOLD ?? 35);\nconst TZ_OFFSET_MIN = Number($env.TZ_OFFSET_MIN ?? 420); // Asia/Bangkok (+07:00)\n\n// ---- รับ payload จาก MQTT Trigger ($json.message เป็น object หรือ string) ----\nlet payload = $json.message ?? $json;\nif (typeof payload === 'string') {\n  try { payload = JSON.parse(payload); } catch { payload = {}; }\n}\n\n// ---- helpers ----\nconst toNum = (v) => {\n  if (v === undefined || v === null) return null;\n  if (typeof v === 'string' && v.trim() === '') return null;\n  const n = Number(v);\n  return Number.isFinite(n) ? n : null;\n};\n\n// เดาสเกล x10 สำหรับค่าดิบจากเรจิสเตอร์ (เช่น 275 -> 27.5)\nconst maybeScale10 = (n) => {\n  if (n === null) return null;\n  if (Number.isInteger(n) && Math.abs(n) >= 100) return n / 10;\n  return n;\n};\n\n// เลือกค่าตัวแรกที่เป็นตัวเลขได้\nconst pickFirstNum = (...candidates) => {\n  for (const c of candidates) {\n    const n = toNum(c);\n    if (n !== null) return n;\n  }\n  return null;\n};\n\n// ---- ดึงค่า temp/hum จากหลายโครงสร้างที่เป็นไปได้ ----\n// 1) คีย์ชื่อพบบ่อย\nlet temp = pickFirstNum(\n  payload.temp, payload.temperature, payload.temp_c, payload.tC, payload.T,\n  payload.xymd02_temp, payload['Temp(°C)'], payload['TEMP']\n);\n\nlet hum = pickFirstNum(\n  payload.hum, payload.humidity, payload.rh, payload.RH,\n  payload.xymd02_hum, payload['Hum(%)'], payload['HUM']\n);\n\n// 2) ค่าดิบแบบ *_raw (มักคูณ 10)\nif (temp === null) temp = maybeScale10(toNum(payload.temp_raw));\nif (hum  === null) hum  = maybeScale10(toNum(payload.hum_raw));\n\n// 3) โครงสร้าง registers: { registers:[t_x10, h_x10] } หรือ object {r0,r1}/{\"0\",\"1\"}\nif ((temp === null || hum === null) && payload.registers) {\n  const r = payload.registers;\n  const r0 = Array.isArray(r) ? r[0] : (r['0'] ?? r.r0 ?? r.reg0);\n  const r1 = Array.isArray(r) ? r[1] : (r['1'] ?? r.r1 ?? r.reg1);\n  if (temp === null) temp = maybeScale10(toNum(r0));\n  if (hum  === null) hum  = maybeScale10(toNum(r1));\n}\n\n// 4) ซ้อนใน data: { data:{ temp:..., hum:... } }\nif ((temp === null || hum === null) && payload.data && typeof payload.data === 'object') {\n  if (temp === null) temp = maybeScale10(pickFirstNum(payload.data.temp, payload.data.temperature, payload.data.temp_raw));\n  if (hum  === null) hum  = maybeScale10(pickFirstNum(payload.data.hum, payload.data.humidity, payload.data.hum_raw, payload.data.rh));\n}\n\n// ---- สถานะและเวลา ----\nconst isHigh = temp !== null && temp > TEMP_SETPT;\nconst mode   = isHigh ? 'high' : 'normal';\n\n// เวลาโลคัล \"YYYY-MM-DD HH:mm:ss\" ตาม offset\nconst ts = new Date(Date.now() + TZ_OFFSET_MIN * 60 * 1000).toISOString().replace('T',' ').slice(0,19);\n\n// ข้อความสั้นเพื่อ debug\nconst status_detail = (() => {\n  if (temp === null && hum === null) return 'no XY-MD02 fields';\n  if (temp === null) return 'temp=N/A';\n  return isHigh\n    ? `TEMP ${temp}°C > TH ${TEMP_SETPT}°C`\n    : `TEMP ${temp}°C ≤ TH ${TEMP_SETPT}°C`;\n})();\n\nreturn [{\n  ts,\n  site: SITE,\n  temp,  tunit: $json.tunit || '°C',\n  hum,   hunit: $json.hunit || '%',\n  threshold_temp: TEMP_SETPT,\n  mode,                         // 'high' | 'normal'\n  isHigh: isHigh ? 1 : 0,\n  isLow : (temp !== null && temp < TEMP_SETPT) ? 1 : 0, // เพื่อความเข้ากันได้\n  status_detail,\n  baseTopic: BASE_TOPIC,\n}];"
      },
      "id": "c04f268a-5ded-49a0-8a78-2d31f7e1433c",
      "name": "Parse xymd02(normalize)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -544,
        -352
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Set: Site Name": {
      "main": [
        [
          {
            "node": "Parse xymd02(normalize)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MQTT Trigger": {
      "main": [
        [
          {
            "node": "Set: Site Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "shouldLog=true": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gate: 1m (high) / 60m (normal)": {
      "main": [
        [
          {
            "node": "shouldLog=true",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse xymd02(normalize)": {
      "main": [
        [
          {
            "node": "Gate: 1m (high) / 60m (normal)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b26cf4d3-99e8-42c4-8a9d-52f2becffc86",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ae77891e61682ce507d6ded849cca0156c91ca717c15eeed76eb0533f2ae6f80"
  },
  "id": "LOc4JppqGYgODSib",
  "tags": []
}