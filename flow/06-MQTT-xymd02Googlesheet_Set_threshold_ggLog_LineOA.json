{
  "name": "06-MQTT-xymd02Googlesheet_Set_threshold_ggLog_LineOA",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e864e34c-5ba8-4a44-a86c-79e54b8b6dab",
              "leftValue": "={{$json.shouldNotify}}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "33f35b84-fea9-44c6-9f6b-148f63a5034d",
      "name": "shouldNotify=true",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -464,
        -128
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bBdHKma7eqZtVHaBk31GKj4HvZ7zyv3nDPyuPWBDWQU",
          "mode": "list",
          "cachedResultName": "n8nxy-md02_logger",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bBdHKma7eqZtVHaBk31GKj4HvZ7zyv3nDPyuPWBDWQU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "xy-md02",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bBdHKma7eqZtVHaBk31GKj4HvZ7zyv3nDPyuPWBDWQU/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "baseTopic": "={{ $json.baseTopic }}",
            "value_source": "={{ $json.value_source }}",
            "status_detail": "={{ $json.status_detail }}",
            "isHigh": "={{ $json.isHigh }}",
            "mode": "={{ $json.mode }}",
            "threshold_temp": "={{ $json.threshold_temp }}",
            "hunit": "={{ $json.hunit }}",
            "hum": "={{ $json.hum }}",
            "tunit": "={{ $json.tunit }}",
            "temp": "={{ $json.temp }}",
            "site": "={{ $json.site }}",
            "ts": "={{ $json.ts }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "ts",
              "displayName": "ts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "site",
              "displayName": "site",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "temp",
              "displayName": "temp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tunit",
              "displayName": "tunit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hum",
              "displayName": "hum",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hunit",
              "displayName": "hunit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "threshold_temp",
              "displayName": "threshold_temp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mode",
              "displayName": "mode",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "isHigh",
              "displayName": "isHigh",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status_detail",
              "displayName": "status_detail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "baseTopic",
              "displayName": "baseTopic",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "value_source",
              "displayName": "value_source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -240,
        -320
      ],
      "id": "0c1718b3-fe75-4231-a422-8b439bcb2468",
      "name": "Append row in sheet",
      "credentials": {
        "googleApi": {
          "id": "RUv1kTtSucsBEEbA",
          "name": "Google Service Account account#zero2hero#1"
        }
      }
    },
    {
      "parameters": {
        "topics": "xymd02",
        "options": {
          "jsonParseBody": true
        }
      },
      "type": "n8n-nodes-base.mqttTrigger",
      "typeVersion": 1,
      "position": [
        -1360,
        -224
      ],
      "id": "a97df866-0bff-413f-b531-034f35a3205a",
      "name": "MQTT Trigger",
      "credentials": {
        "mqtt": {
          "id": "yzb3rPCDhcnA9IgT",
          "name": "MQTT account#zero2hero#1"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e864e34c-5ba8-4a44-a86c-79e54b8b6dab",
              "leftValue": "={{$json.shouldLog}}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0dd29486-38e3-45d5-8849-a6914068eb57",
      "name": "shouldLog=true",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -464,
        -320
      ]
    },
    {
      "parameters": {
        "functionCode": "// Gate: 1m (high) / 60m (normal) — Generic (DHT or XY-MD02) + Telegram flags\n\n// --- config (ENV + per-item overrides) ---\nconst HIGH_EVERY_MIN_DEFAULT   = Number($env.HIGH_EVERY_MIN   ?? 1);   // high: ทุก X นาที\nconst NORMAL_EVERY_MIN_DEFAULT = Number($env.NORMAL_EVERY_MIN ?? 60);  // normal: ทุก X นาที\n\nconst item  = { ...$json };\nconst nowMs = Date.now();\n\n// --- identity (unique key per device/stream) ---\nconst siteName  = item.site || 'default';\nconst baseTopic = item.baseTopic || item.topic || 'XYMD02'; // เดิม DHTsensor → ใช้ XYMD02 เป็น fallback (ถ้าส่งมาเป็น DHTsensor จะเคารพค่านั้น)\nconst sensorId  = item.sensor_id ?? item.slave_id ?? item.device_id ?? null;\nconst sensorKey = sensorId ? `${siteName}::${baseTopic}::${sensorId}` : `${siteName}::${baseTopic}`;\n\n// --- per-item overrides for periods ---\nconst highEveryMin   = Number.isFinite(Number(item.high_every_min))   ? Number(item.high_every_min)   : HIGH_EVERY_MIN_DEFAULT;\nconst normalEveryMin = Number.isFinite(Number(item.normal_every_min)) ? Number(item.normal_every_min) : NORMAL_EVERY_MIN_DEFAULT;\n\n// --- global state ---\nconst g = getWorkflowStaticData('global');\ng._gate      = g._gate      || {};\ng._lastValid = g._lastValid || {};\n\ng._gate[sensorKey] = g._gate[sensorKey] || { lastMode: 'normal', lastHighAt: 0, lastNormalAt: 0, initDone: false };\ng._lastValid[sensorKey] = g._lastValid[sensorKey] || { temp: null, hum: null };\n\n// --- helpers ---\nconst hasNum = v => {\n  if (v === '' || v === null || v === undefined) return false;\n  const n = Number(v);\n  return Number.isFinite(n);\n};\nconst pick = (cur, last) => (hasNum(cur) ? Number(cur) : (hasNum(last) ? Number(last) : null));\nconst f1   = v => (hasNum(v) ? Number(v).toFixed(1) : '—');\n\n// --- last valid tracking ---\nif (hasNum(item.temp)) g._lastValid[sensorKey].temp = Number(item.temp);\nif (hasNum(item.hum))  g._lastValid[sensorKey].hum  = Number(item.hum);\n\n// --- fallback to last valid if missing ---\nitem.temp = pick(item.temp, g._lastValid[sensorKey].temp);\nitem.hum  = pick(item.hum,  g._lastValid[sensorKey].hum);\nitem.value_source = (hasNum($json.temp) || hasNum($json.hum)) ? 'current' : 'last';\n\n// --- threshold & mode ---\nconst thresholdTemp = hasNum(item.threshold_temp)\n  ? Number(item.threshold_temp)\n  : (hasNum($env.TEMP_THRESHOLD) ? Number($env.TEMP_THRESHOLD) : 35);\n\nlet modeNow = (item.mode === 'high' || item.mode === 'normal') ? item.mode : 'normal';\nif (hasNum(item.temp)) modeNow = (Number(item.temp) > thresholdTemp) ? 'high' : 'normal';\n\nconst prevMode = g._gate[sensorKey].lastMode;\n\n// --- decide frequency (log & notify) ---\nlet shouldLog = false;\nlet shouldNotify = false;\nlet status_detail = 'normal_periodic';\n\n// ยิง log/notify แรกสุดของอุปกรณ์นี้ (init) เพื่อไม่ต้องรอครบช่วงเวลา\nif (!g._gate[sensorKey].initDone) {\n  shouldLog = true;\n  shouldNotify = true;\n  status_detail = 'init';\n  if (modeNow === 'high') g._gate[sensorKey].lastHighAt = nowMs;\n  else                    g._gate[sensorKey].lastNormalAt = nowMs;\n  g._gate[sensorKey].initDone = true;\n} else if (modeNow === 'high') {\n  const due = nowMs >= g._gate[sensorKey].lastHighAt + highEveryMin * 60 * 1000;\n  if (due) {\n    shouldLog = true;\n    shouldNotify = true;\n    g._gate[sensorKey].lastHighAt = nowMs;\n  }\n  status_detail = 'high';\n} else {\n  if (prevMode === 'high') {\n    // recovery: แจ้ง & บันทึกทันที 1 ครั้ง\n    shouldLog = true;\n    shouldNotify = true;\n    status_detail = 'recovery';\n    g._gate[sensorKey].lastNormalAt = nowMs;\n  } else {\n    const due = nowMs >= g._gate[sensorKey].lastNormalAt + normalEveryMin * 60 * 1000;\n    if (due) {\n      shouldLog = true;\n      shouldNotify = true;\n      g._gate[sensorKey].lastNormalAt = nowMs;\n    }\n    status_detail = 'normal_periodic';\n  }\n}\ng._gate[sensorKey].lastMode = modeNow;\n\n// --- build Telegram text (plain text) ---\nconst statusCategory =\n  status_detail === 'high'     ? 'high' :\n  status_detail === 'recovery' ? 'recovery' :\n  status_detail === 'init'     ? 'init' : 'normal';\n\nconst ICONS = { high: '🔥', recovery: '🟢', normal: '✅', init: '🆕' };\nconst STATUS_TEXT = { high: 'สูงเกินเกณฑ์', recovery: 'ฟื้นตัว', normal: 'ปกติ', init: 'เริ่มต้น' };\n\nconst tUnit = item.tunit || '°C';\nconst hUnit = item.hunit || '%';\nconst thText = hasNum(thresholdTemp) ? ` (TH ${thresholdTemp}${tUnit})` : '';\nconst title = `${ICONS[statusCategory]} ${baseTopic} @ ${siteName}`; // ทำให้ generic (ไม่ fix ว่า DHT)\n\nconst lines = [\n  title,\n  `🌡️ Temperature: ${f1(item.temp)} ${tUnit}${thText}`,\n  `💧 Humidity: ${f1(item.hum)} ${hUnit}`,\n  `📟 Status: ${STATUS_TEXT[statusCategory]} (${statusCategory})${item.ts ? ` | 🕒 Time: ${item.ts}` : ''}`,\n];\nitem.text = lines.join('\\n');\n\n// --- outputs ---\nitem.mode             = modeNow;\nitem.threshold_temp   = thresholdTemp;\nitem.status_detail    = status_detail;\nitem.shouldLog        = !!shouldLog;     // ใช้กับ IF → Sheets\nitem.shouldNotify     = !!shouldNotify;  // ใช้กับ IF → Telegram\nitem.gate_key         = sensorKey;\nitem.high_every_min   = highEveryMin;\nitem.normal_every_min = normalEveryMin;\n\nreturn [item];"
      },
      "id": "1ad18f7b-abe6-4b25-a2ac-33bd55e87132",
      "name": "Gate: 1m (high) / 60m (normal)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -688,
        -224
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "site",
              "value": "={{$env.SITE_NAME || 'Wather STA1'}}"
            },
            {
              "name": "baseTopic",
              "value": "={{$env.MQTT_BASE_TOPIC || 'Wather STA1'}}"
            },
            {
              "name": "threshold_temp",
              "value": "={{ Number($env.TEMP_THRESHOLD ?? 30) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "21e163a7-e657-4992-9f36-0882ff58ca14",
      "name": "Set: Site Name/Threshold",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        -1136,
        -224
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse EnvSensor (normalize) — DHT + XY-MD02 (Modbus-compatible)\n// Output: ts, site, temp, tunit, hum, hunit, threshold_temp, mode, isHigh, isLow, status_detail, baseTopic\n\nconst SITE          = $json.site ?? $json.site_name ?? $env.SITE_NAME ?? \"MSU_Lab\";\nconst BASE_TOPIC    = $json.baseTopic ?? $json.topic ?? $env.MQTT_BASE_TOPIC ?? \"DHTsensor\";\n// ใช้ threshold จาก $json ก่อน แล้วค่อยตกไป ENV (ตามที่คุณตั้งใจ)\nconst INPUT_THRESHOLD = Number($json.threshold_temp ?? $env.TEMP_THRESHOLD ?? 35);\nconst TZ_OFFSET_MIN = Number($env.TZ_OFFSET_MIN ?? 420);\n\n// ---- รับ payload ----\nlet payload = $json.message ?? $json;\nif (typeof payload === 'string') { try { payload = JSON.parse(payload); } catch { payload = {}; } }\n\n// ---- helpers ----\nconst toNum = (v) => {\n  if (v === undefined || v === null) return null;\n  if (typeof v === 'string' && v.trim() === '') return null;\n  const n = Number(v);\n  return Number.isFinite(n) ? n : null;\n};\n// เดาสเกล x10 ของค่าดิบเรจิสเตอร์ (เช่น 275 → 27.5)\nconst maybeScale10 = (n) => (n !== null && Number.isInteger(n) && Math.abs(n) >= 100) ? n / 10 : n;\nconst pickFirstNum = (...cands) => {\n  for (const c of cands) { const n = toNum(c); if (n !== null) return n; }\n  return null;\n};\n\n// ---- ดึง temp/hum: รองรับทั้ง DHT style และ Modbus style ----\n// DHT-style คีย์ที่พบบ่อย\nlet temp = pickFirstNum(\n  payload.temp, payload.temperature, payload.dht?.temp,\n  payload.DHT11?.temp, payload.DHT22?.temperature, payload.temp_c, payload.tC, payload.T\n);\nlet hum  = pickFirstNum(\n  payload.hum, payload.humidity, payload.dht?.hum,\n  payload.DHT11?.humidity, payload.DHT22?.hum, payload.rh, payload.RH\n);\n\n// Modbus raw (มักคูณ 10)\nif (temp === null) temp = maybeScale10(toNum(payload.temp_raw));\nif (hum  === null) hum  = maybeScale10(toNum(payload.hum_raw));\n\n// Modbus registers: { registers:[t_x10, h_x10] } หรือ object {r0,r1}/{\"0\",\"1\"}\nif ((temp === null || hum === null) && payload.registers) {\n  const r = payload.registers;\n  const r0 = Array.isArray(r) ? r[0] : (r['0'] ?? r.r0 ?? r.reg0);\n  const r1 = Array.isArray(r) ? r[1] : (r['1'] ?? r.r1 ?? r.reg1);\n  if (temp === null) temp = maybeScale10(toNum(r0));\n  if (hum  === null) hum  = maybeScale10(toNum(r1));\n}\n\n// ซ้อนใน data: { data:{ temp:..., hum:... } }\nif ((temp === null || hum === null) && payload.data && typeof payload.data === 'object') {\n  if (temp === null) temp = maybeScale10(pickFirstNum(payload.data.temp, payload.data.temperature, payload.data.temp_raw));\n  if (hum  === null) hum  = maybeScale10(pickFirstNum(payload.data.hum, payload.data.humidity, payload.data.hum_raw, payload.data.rh));\n}\n\n// ---- mode/threshold ----\nconst hasThreshold = Number.isFinite(INPUT_THRESHOLD);\nconst isHigh = hasThreshold && temp !== null && temp > INPUT_THRESHOLD;\nconst mode   = isHigh ? 'high' : 'normal';\n\n// ---- เวลาโลคัล \"YYYY-MM-DD HH:mm:ss\" ----\nconst ts = new Date(Date.now() + TZ_OFFSET_MIN * 60 * 1000)\n  .toISOString().replace('T',' ').slice(0,19);\n\n// ---- ข้อความสั้นเพื่อ debug ----\nconst status_detail = (() => {\n  if (temp === null) return 'temp=N/A';\n  if (!hasThreshold) return `TEMP ${temp}°C (no TH)`;\n  return isHigh\n    ? `TEMP ${temp}°C > TH ${INPUT_THRESHOLD}°C`\n    : `TEMP ${temp}°C ≤ TH ${INPUT_THRESHOLD}°C`;\n})();\n\nreturn [{\n  ts,\n  site: SITE,\n  temp,  tunit: $json.tunit || '°C',\n  hum,   hunit: $json.hunit || '%',\n  threshold_temp: hasThreshold ? INPUT_THRESHOLD : null,\n  mode,\n  isHigh: isHigh ? 1 : 0,\n  isLow : (hasThreshold && temp !== null && temp < INPUT_THRESHOLD) ? 1 : 0,\n  status_detail,\n  baseTopic: BASE_TOPIC,\n}];"
      },
      "id": "7961e45c-e655-446d-8b01-1f676951a40e",
      "name": "Parse xymd02(normalize)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -912,
        -224
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "toId",
              "value": "=Uf959625c07c939e826d15416141c3174"
            }
          ]
        },
        "options": {}
      },
      "name": "Set (LINE Target)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        -240,
        -128
      ],
      "id": "e3f921ed-1fa7-4c71-8c21-58cc080dad75",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "flex",
        "altText": "=สรุปสถานี {{ $json.site }}",
        "flexContent": "={\n  \"type\": \"bubble\",\n  \"size\": \"mega\",\n\n  \"header\": {\n    \"type\": \"box\",\n    \"layout\": \"horizontal\",\n    \"paddingAll\": \"12px\",\n    \"contents\": [\n      {\n        \"type\": \"text\",\n        \"text\": {{ JSON.stringify(`📍 ${$json.site}`) }},\n        \"weight\": \"bold\",\n        \"size\": \"lg\",\n        \"wrap\": true\n      },\n      {\n        \"type\": \"text\",\n        \"text\": {{ JSON.stringify(($json.mode?.toUpperCase?.()) || \"NORMAL\") }},\n        \"size\": \"xs\",\n        \"align\": \"end\",\n        \"color\": {{ ($json.isHigh ? JSON.stringify(\"#ef4444\") : $json.isLow ? JSON.stringify(\"#0ea5e9\") : JSON.stringify(\"#6b7280\")) }}\n      }\n    ]\n  },\n\n  \"body\": {\n    \"type\": \"box\",\n    \"layout\": \"vertical\",\n    \"spacing\": \"md\",\n    \"contents\": [\n      { \"type\": \"separator\" },\n\n      {\n        \"type\": \"box\",\n        \"layout\": \"vertical\",\n        \"spacing\": \"sm\",\n        \"margin\": \"md\",\n        \"contents\": [\n          {\n            \"type\": \"box\",\n            \"layout\": \"horizontal\",\n            \"contents\": [\n              { \"type\": \"text\", \"text\": \"🌡️ Temperature\", \"size\": \"sm\", \"color\": \"#6b7280\", \"flex\": 4 },\n              { \"type\": \"text\", \"text\": {{ JSON.stringify(`${$json.temp} °C`) }}, \"size\": \"sm\", \"align\": \"end\", \"flex\": 3 }\n            ]\n          },\n          {\n            \"type\": \"box\",\n            \"layout\": \"horizontal\",\n            \"contents\": [\n              { \"type\": \"text\", \"text\": \"🎯 Threshold\", \"size\": \"sm\", \"color\": \"#6b7280\", \"flex\": 4 },\n              { \"type\": \"text\", \"text\": {{ JSON.stringify(`${$json.threshold_temp} °C`) }}, \"size\": \"sm\", \"align\": \"end\", \"flex\": 3 }\n            ]\n          },\n          {\n            \"type\": \"box\",\n            \"layout\": \"horizontal\",\n            \"contents\": [\n              { \"type\": \"text\", \"text\": \"💧 Humidity\", \"size\": \"sm\", \"color\": \"#6b7280\", \"flex\": 4 },\n              { \"type\": \"text\", \"text\": {{ JSON.stringify(`${$json.hum} %`) }}, \"size\": \"sm\", \"align\": \"end\", \"flex\": 3 }\n            ]\n          }\n        ]\n      },\n\n      {\n        \"type\": \"box\",\n        \"layout\": \"baseline\",\n        \"margin\": \"md\",\n        \"contents\": [\n          {\n            \"type\": \"text\",\n            \"text\": {{ JSON.stringify($json.status_detail ? `🟩 Status: ${$json.status_detail}` : \"🟩 Status: normal\") }},\n            \"size\": \"sm\",\n            \"wrap\": true,\n            \"color\": {{ ($json.isHigh ? JSON.stringify(\"#ef4444\") : $json.isLow ? JSON.stringify(\"#0ea5e9\") : JSON.stringify(\"#10b981\")) }}\n          }\n        ]\n      },\n\n      {\n        \"type\": \"box\",\n        \"layout\": \"baseline\",\n        \"contents\": [\n          { \"type\": \"icon\", \"url\": \"https://cdn-icons-png.flaticon.com/128/1827/1827951.png\", \"size\": \"xs\" },\n          { \"type\": \"text\", \"text\": {{ JSON.stringify(`Time: ${$json.ts}`) }}, \"size\": \"xs\", \"color\": \"#6b7280\", \"margin\": \"sm\", \"wrap\": true }\n        ]\n      }\n    ]\n  },\n\n  \"footer\": {\n    \"type\": \"box\",\n    \"layout\": \"vertical\",\n    \"spacing\": \"sm\",\n    \"contents\": [\n      {\n        \"type\": \"button\",\n        \"style\": \"primary\",\n        \"height\": \"sm\",\n        \"color\": {{ ($json.isHigh ? JSON.stringify(\"#ef4444\") : $json.isLow ? JSON.stringify(\"#0ea5e9\") : JSON.stringify(\"#6366f1\")) }},\n        \"action\": {\n          \"type\": \"uri\",\n          \"label\": \"รายละเอียด\",\n          \"uri\": \"https://www.facebook.com/smfthailand\"\n        }\n      }\n    ]\n  }\n}\n"
      },
      "type": "n8n-nodes-linewebhook.LineMessageNode",
      "typeVersion": 1,
      "position": [
        -16,
        -128
      ],
      "id": "22ab02c4-b756-40f3-8bcc-f926eb2f466d",
      "name": "LineMessageNode-Flex"
    },
    {
      "parameters": {
        "message": "={{ $json.message }}",
        "replyToken": "=",
        "targetRecipient": "={{ $('Set (LINE Target)').item.json.toId }}"
      },
      "type": "n8n-nodes-linewebhook.LineMessaging",
      "typeVersion": 1,
      "position": [
        208,
        -128
      ],
      "id": "c8f45809-ee7a-4d38-8311-3d2f5c8ec618",
      "name": "LineMessaging-SendMessage",
      "credentials": {
        "lineMessagingAuthApi": {
          "id": "pTNOUR5YOIYZfi2T",
          "name": "Line Messaging Auth account#zero2hero#1"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.text }}"
      },
      "type": "n8n-nodes-linewebhook.LineMessageNode",
      "typeVersion": 1,
      "position": [
        -16,
        80
      ],
      "id": "b59b5d15-c48f-440d-8951-bbb796545d27",
      "name": "LineMessageNode-Text"
    }
  ],
  "pinData": {},
  "connections": {
    "shouldNotify=true": {
      "main": [
        [
          {
            "node": "Set (LINE Target)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MQTT Trigger": {
      "main": [
        [
          {
            "node": "Set: Site Name/Threshold",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "shouldLog=true": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gate: 1m (high) / 60m (normal)": {
      "main": [
        [
          {
            "node": "shouldLog=true",
            "type": "main",
            "index": 0
          },
          {
            "node": "shouldNotify=true",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Site Name/Threshold": {
      "main": [
        [
          {
            "node": "Parse xymd02(normalize)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse xymd02(normalize)": {
      "main": [
        [
          {
            "node": "Gate: 1m (high) / 60m (normal)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set (LINE Target)": {
      "main": [
        [
          {
            "node": "LineMessageNode-Flex",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LineMessageNode-Flex": {
      "main": [
        [
          {
            "node": "LineMessaging-SendMessage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "20b7d865-f724-4fa3-8863-d68b91797e56",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ae77891e61682ce507d6ded849cca0156c91ca717c15eeed76eb0533f2ae6f80"
  },
  "id": "2lUC14Fw2BHdio7V",
  "tags": []
}